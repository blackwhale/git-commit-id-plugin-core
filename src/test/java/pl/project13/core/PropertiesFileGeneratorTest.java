/*
 * This file is part of git-commit-id-plugin-core by Konrad 'ktoso' Malawski <konrad.malawski@java.pl>
 *
 * git-commit-id-plugin-core is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * git-commit-id-plugin-core is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with git-commit-id-plugin-core.  If not, see <http://www.gnu.org/licenses/>.
 */

package pl.project13.core;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;
import pl.project13.core.log.LoggerBridge;
import pl.project13.core.log.StdOutLoggerBridge;
import pl.project13.core.util.BuildFileChangeListener;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Properties;

import static java.nio.charset.StandardCharsets.UTF_8;
import static org.junit.Assert.assertEquals;

public class PropertiesFileGeneratorTest {
  @Rule
  public final TemporaryFolder temporaryFolder = new TemporaryFolder();
  
  private final LoggerBridge loggerBridge = new StdOutLoggerBridge(false);
  
  private PropertiesFileGenerator propertiesFileGenerator;
  
  @Before
  public void setUp() {
    BuildFileChangeListener buildFileChangeListener = file -> {
      // Ignore
    };

    propertiesFileGenerator = new PropertiesFileGenerator(loggerBridge, buildFileChangeListener, "properties", "", "test");
  }
  
  @Test
  public void generatedPropertiesFileDoesNotContainDateComment() throws GitCommitIdExecutionException, IOException {
    Properties properties = new Properties();
    properties.put(GitCommitPropertyConstant.COMMIT_ID_FULL, "b5993378ffadd1f84dc8da220b9204d157ec0f29");
    properties.put(GitCommitPropertyConstant.BRANCH, "develop");
  
    Path propertiesPath = temporaryFolder.getRoot().toPath().resolve("git.properties");
    propertiesFileGenerator.maybeGeneratePropertiesFile(properties, temporaryFolder.getRoot(), propertiesPath.getFileName().toString(), UTF_8);
  
    byte[] bytes = Files.readAllBytes(propertiesPath);
    String actualContent = new String(bytes, UTF_8);
    String expectedContent = "#Generated by Git-Commit-Id-Plugin\n"
        + "branch=develop\n"
        + "commit.id.full=b5993378ffadd1f84dc8da220b9204d157ec0f29\n";
    assertEquals(expectedContent, actualContent);
  }

  @Test
  public void rereadGeneratedPropertiesFile() throws GitCommitIdExecutionException, IOException {
    Properties properties = new Properties();
    properties.put(GitCommitPropertyConstant.COMMIT_ID_FULL, "b5993378ffadd1f84dc8da220b9204d157ec0f29");
    properties.put(GitCommitPropertyConstant.BRANCH, "develop");
  
    Path propertiesPath = temporaryFolder.getRoot().toPath().resolve("git.properties");
    propertiesFileGenerator.maybeGeneratePropertiesFile(properties, temporaryFolder.getRoot(), propertiesPath.getFileName().toString(), UTF_8);

    // Re-read the generated properties file.
    propertiesFileGenerator.maybeGeneratePropertiesFile(properties, temporaryFolder.getRoot(), propertiesPath.getFileName().toString(), UTF_8);

    byte[] bytes = Files.readAllBytes(propertiesPath);
    String actualContent = new String(bytes, UTF_8);
    String expectedContent = "#Generated by Git-Commit-Id-Plugin\n"
        + "branch=develop\n"
        + "commit.id.full=b5993378ffadd1f84dc8da220b9204d157ec0f29\n";
    assertEquals(expectedContent, actualContent);
  }
}